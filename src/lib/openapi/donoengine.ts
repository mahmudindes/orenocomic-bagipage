/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/comics": {
    /** List comic. */
    get: operations["listComic"];
    /** Add comic. */
    post: operations["addComic"];
  };
  "/comics/{code}": {
    /** Get comic. */
    get: operations["getComic"];
    /** Delete comic. */
    delete: operations["deleteComic"];
    /** Update comic. */
    patch: operations["updateComic"];
  };
  "/comics/{code}/titles": {
    /** Add comic title. */
    post: operations["addComicTitle"];
  };
  "/comics/{code}/titles/{rid}": {
    /** Get comic title. */
    get: operations["getComicTitle"];
    /** Delete comic title. */
    delete: operations["deleteComicTitle"];
    /** Update comic title. */
    patch: operations["updateComicTitle"];
  };
  "/comics/{code}/covers": {
    /** Add comic cover. */
    post: operations["addComicCover"];
  };
  "/comics/{code}/covers/{rid}": {
    /** Get comic cover. */
    get: operations["getComicCover"];
    /** Delete comic cover. */
    delete: operations["deleteComicCover"];
    /** Update comic cover. */
    patch: operations["updateComicCover"];
  };
  "/comics/{code}/synopses": {
    /** Add comic synopsis. */
    post: operations["addComicSynopsis"];
  };
  "/comics/{code}/synopses/{rid}": {
    /** Get comic synopsis. */
    get: operations["getComicSynopsis"];
    /** Delete comic synopsis. */
    delete: operations["deleteComicSynopsis"];
    /** Update comic synopsis. */
    patch: operations["updateComicSynopsis"];
  };
  "/comics/{code}/externals": {
    /** Add comic external. */
    post: operations["addComicExternal"];
  };
  "/comics/{code}/externals/{rid}": {
    /** Get comic external. */
    get: operations["getComicExternal"];
    /** Delete comic external. */
    delete: operations["deleteComicExternal"];
    /** Update comic external. */
    patch: operations["updateComicExternal"];
  };
  "/comics/{code}/categories": {
    /** Add comic category. */
    post: operations["addComicCategory"];
  };
  "/comics/{code}/categories/{typeID}-{categoryCode}": {
    /** Get comic category. */
    get: operations["getComicCategory"];
    /** Delete comic category. */
    delete: operations["deleteComicCategory"];
    /** Update comic category. */
    patch: operations["updateComicCategory"];
  };
  "/comics/{code}/tags": {
    /** Add comic tag. */
    post: operations["addComicTag"];
  };
  "/comics/{code}/tags/{typeID}-{tagCode}": {
    /** Get comic tag. */
    get: operations["getComicTag"];
    /** Delete comic tag. */
    delete: operations["deleteComicTag"];
    /** Update comic tag. */
    patch: operations["updateComicTag"];
  };
  "/comics/{code}/relations": {
    /** Add comic relation. */
    post: operations["addComicRelation"];
  };
  "/comics/{code}/relations/{typeID}-{comicCode}": {
    /** Get comic relation. */
    get: operations["getComicRelation"];
    /** Delete comic relation. */
    delete: operations["deleteComicRelation"];
    /** Update comic relation. */
    patch: operations["updateComicRelation"];
  };
  "/comics/{code}/chapters": {
    /** List comic chapter. */
    get: operations["listComicChapter"];
    /** Add comic chapter. */
    post: operations["addComicChapter"];
  };
  "/comics/{code}/chapters/{cv}": {
    /** Get comic chapter. */
    get: operations["getComicChapter"];
    /** Delete comic chapter. */
    delete: operations["deleteComicChapter"];
    /** Update comic chapter. */
    patch: operations["updateComicChapter"];
  };
  "/categories": {
    /** List category. */
    get: operations["listCategory"];
    /** Add category. */
    post: operations["addCategory"];
  };
  "/categories/{typeID}-{code}": {
    /** Get category. */
    get: operations["getCategory"];
    /** Delete category. */
    delete: operations["deleteCategory"];
    /** Update category. */
    patch: operations["updateCategory"];
  };
  "/categories/{typeID}-{code}/relations": {
    /** Add category relation. */
    post: operations["addCategoryRelation"];
  };
  "/categories/{typeID}-{code}/relations/{categoryCode}": {
    /** Get category relation. */
    get: operations["getCategoryRelation"];
    /** Delete category relation. */
    delete: operations["deleteCategoryRelation"];
    /** Update category relation. */
    patch: operations["updateCategoryRelation"];
  };
  "/tags": {
    /** List tag. */
    get: operations["listTag"];
    /** Add tag. */
    post: operations["addTag"];
  };
  "/tags/{typeID}-{code}": {
    /** Get tag. */
    get: operations["getTag"];
    /** Delete tag. */
    delete: operations["deleteTag"];
    /** Update tag. */
    patch: operations["updateTag"];
  };
  "/languages": {
    /** List language. */
    get: operations["listLanguage"];
    /** Add language. */
    post: operations["addLanguage"];
  };
  "/languages/{ietf}": {
    /** Get language. */
    get: operations["getLanguage"];
    /** Delete language. */
    delete: operations["deleteLanguage"];
    /** Update language. */
    patch: operations["updateLanguage"];
  };
  "/websites": {
    /** List website. */
    get: operations["listWebsite"];
    /** Add website. */
    post: operations["addWebsite"];
  };
  "/websites/{domain}": {
    /** Get website. */
    get: operations["getWebsite"];
    /** Delete website. */
    delete: operations["deleteWebsite"];
    /** Update website. */
    patch: operations["updateWebsite"];
  };
  "/types/categories": {
    /** List category type. */
    get: operations["listCategoryType"];
    /** Add category type. */
    post: operations["addCategoryType"];
  };
  "/types/categories/{code}": {
    /** Get category type. */
    get: operations["getCategoryType"];
    /** Delete category type. */
    delete: operations["deleteCategoryType"];
    /** Update category type. */
    patch: operations["updateCategoryType"];
  };
  "/types/tags": {
    /** List tag type. */
    get: operations["listTagType"];
    /** Add tag type. */
    post: operations["addTagType"];
  };
  "/types/tags/{code}": {
    /** Get tag type. */
    get: operations["getTagType"];
    /** Delete tag type. */
    delete: operations["deleteTagType"];
    /** Update tag type. */
    patch: operations["updateTagType"];
  };
  "/types/comic-relations": {
    /** List comic relation type. */
    get: operations["listComicRelationType"];
    /** Add comic relation type. */
    post: operations["addComicRelationType"];
  };
  "/types/comic-relations/{code}": {
    /** Get comic relation type. */
    get: operations["getComicRelationType"];
    /** Delete comic relation type. */
    delete: operations["deleteComicRelationType"];
    /** Update comic relation type. */
    patch: operations["updateComicRelationType"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Object: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
    };
    Comic: components["schemas"]["Object"] & ({
      code: string;
      languageID?: number | null;
      languageIETF?: string | null;
      titles?: components["schemas"]["ComicTitle"][];
      covers?: components["schemas"]["ComicCover"][];
      synopses?: components["schemas"]["ComicSynopsis"][];
      /** Format: date-time */
      publishedFrom?: string | null;
      /** Format: date-time */
      publishedTo?: string | null;
      totalChapter?: number | null;
      totalVolume?: number | null;
      nsfw?: number | null;
      nsfl?: number | null;
      chapters?: components["schemas"]["ComicChapter"][];
      externals?: components["schemas"]["ComicExternal"][];
      categories?: components["schemas"]["Category"][];
      tags?: components["schemas"]["Tag"][];
      relations?: components["schemas"]["ComicRelation"][];
      additionals?: Record<string, unknown> | null;
    });
    NewComic: {
      code?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      /** Format: date-time */
      publishedFrom?: string | null;
      /** Format: date-time */
      publishedTo?: string | null;
      totalChapter?: number | null;
      totalVolume?: number | null;
      nsfw?: number | null;
      nsfl?: number | null;
    };
    SetComic: {
      code?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      /** Format: date-time */
      publishedFrom?: string | null;
      /** Format: date-time */
      publishedTo?: string | null;
      totalChapter?: number | null;
      totalVolume?: number | null;
      nsfw?: number | null;
      nsfl?: number | null;
      setNull?: string[];
    };
    ComicTitle: components["schemas"]["Object"] & ({
      rid: string;
      languageID: number;
      languageIETF: string;
      title: string;
      synonym?: boolean | null;
      romanized?: boolean | null;
    });
    NewComicTitle: {
      rid?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      title: string;
      synonym?: boolean | null;
      romanized?: boolean | null;
    };
    SetComicTitle: {
      rid?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      title?: string | null;
      synonym?: boolean | null;
      romanized?: boolean | null;
      setNull?: string[];
    };
    ComicCover: components["schemas"]["Object"] & ({
      rid: string;
      websiteID: number;
      websiteDomain: string;
      relativeURL: string;
      priority?: number | null;
    });
    NewComicCover: {
      rid?: string | null;
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL: string;
      priority?: number | null;
    };
    SetComicCover: {
      rid?: string | null;
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL?: string | null;
      priority?: number | null;
      setNull?: string[];
    };
    ComicSynopsis: components["schemas"]["Object"] & ({
      rid: string;
      languageID: number;
      languageIETF: string;
      synopsis: string;
      version?: string | null;
      romanized?: boolean | null;
    });
    NewComicSynopsis: {
      rid?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      synopsis: string;
      version?: string | null;
      romanized?: boolean | null;
    };
    SetComicSynopsis: {
      rid?: string | null;
      languageID?: number | null;
      languageIETF?: string | null;
      synopsis?: string | null;
      version?: string | null;
      romanized?: boolean | null;
      setNull?: string[];
    };
    ComicExternal: components["schemas"]["Object"] & ({
      rid: string;
      websiteID: number;
      websiteDomain: string;
      relativeURL?: string | null;
      official?: boolean | null;
    });
    NewComicExternal: {
      rid?: string | null;
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL?: string | null;
      official?: boolean | null;
    };
    SetComicExternal: {
      rid?: string | null;
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL?: string | null;
      official?: boolean | null;
      setNull?: string[];
    };
    ComicCategory: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      categoryID: number;
      categoryTypeID: number;
      categoryCode: string;
    };
    NewComicCategory: {
      categoryID?: number | null;
      categoryTypeID?: number | null;
      categoryTypeCode?: string | null;
      categoryCode?: string | null;
    };
    SetComicCategory: {
      categoryID?: number | null;
      categoryTypeID?: number | null;
      categoryTypeCode?: string | null;
      categoryCode?: string | null;
    };
    ComicTag: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      tagID: number;
      tagTypeID: number;
      tagCode: string;
    };
    NewComicTag: {
      tagID?: number | null;
      tagTypeID?: number | null;
      tagTypeCode?: string | null;
      tagCode?: string | null;
    };
    SetComicTag: {
      tagID?: number | null;
      tagTypeID?: number | null;
      tagTypeCode?: string | null;
      tagCode?: string | null;
    };
    ComicRelation: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      typeID: number;
      typeCode?: string;
      comicID: number;
      comicCode: string;
    };
    NewComicRelation: {
      typeID?: number | null;
      typeCode?: string | null;
      comicID?: number | null;
      comicCode?: string | null;
    };
    SetComicRelation: {
      typeID?: number | null;
      typeCode?: string | null;
      comicID?: number | null;
      comicCode?: string | null;
    };
    ComicChapter: components["schemas"]["Object"] & ({
      chapter: string;
      version?: string | null;
      volume?: string | null;
      /** Format: date-time */
      releasedAt: string;
    });
    NewComicChapter: {
      chapter: string;
      version?: string | null;
      volume?: string | null;
      /** Format: date-time */
      releasedAt: string;
    };
    SetComicChapter: {
      chapter?: string | null;
      version?: string | null;
      volume?: string | null;
      /** Format: date-time */
      releasedAt?: string | null;
      setNull?: string[];
    };
    Category: components["schemas"]["Object"] & {
      typeID: number;
      typeCode: string;
      code: string;
      name: string;
      relations?: components["schemas"]["CategoryRelation"][];
    };
    NewCategory: {
      typeID?: number | null;
      typeCode?: string | null;
      code: string;
      name: string;
    };
    SetCategory: {
      typeID?: number | null;
      typeCode?: string | null;
      code?: string | null;
      name?: string | null;
    };
    CategoryRelation: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      categoryID: number;
      categoryCode: string;
    };
    NewCategoryRelation: {
      categoryID?: number | null;
      categoryCode?: string | null;
    };
    SetCategoryRelation: {
      categoryID?: number | null;
      categoryCode?: string | null;
    };
    Tag: components["schemas"]["Object"] & {
      typeID: number;
      typeCode: string;
      code: string;
      name: string;
    };
    NewTag: {
      typeID?: number | null;
      typeCode?: string | null;
      code: string;
      name: string;
    };
    SetTag: {
      typeID?: number | null;
      typeCode?: string | null;
      code?: string | null;
      name?: string | null;
    };
    Language: components["schemas"]["Object"] & {
      ietf: string;
      name: string;
    };
    NewLanguage: {
      ietf: string;
      name: string;
    };
    SetLanguage: {
      ietf?: string | null;
      name?: string | null;
    };
    Website: components["schemas"]["Object"] & {
      domain: string;
      name: string;
    };
    NewWebsite: {
      domain: string;
      name: string;
    };
    SetWebsite: {
      domain?: string | null;
      name?: string | null;
    };
    GenericType: components["schemas"]["Object"] & {
      code: string;
      name: string;
    };
    NewGenericType: {
      code: string;
      name: string;
    };
    SetGenericType: {
      code?: string | null;
      name?: string | null;
    };
    Error: {
      error: {
        status: string;
        message: string;
      };
    };
  };
  responses: {
    /** @description Unexpected error. */
    Default: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List comic. */
  listComic: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
        /** @description Filter by comic external values. */
        comic_external?: string[];
      };
    };
    responses: {
      /** @description Comic list. */
      200: {
        headers: {
          /** @description The total count of comic with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of comic with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Comic"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic. */
  addComic: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComic"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComic"];
      };
    };
    responses: {
      /** @description Comic added. */
      201: {
        headers: {
          /** @description The path of new comic. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic. */
  getComic: {
    parameters: {
      path: {
        /** @description Code of comic to return. */
        code: string;
      };
    };
    responses: {
      /** @description Comic gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic. */
  deleteComic: {
    parameters: {
      path: {
        /** @description Code of comic to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Comic deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic. */
  updateComic: {
    parameters: {
      path: {
        /** @description Code of comic to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComic"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComic"];
      };
    };
    responses: {
      /** @description Comic updated. */
      200: {
        headers: {
          /** @description The path of updated comic. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      /** @description Comic unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic title. */
  addComicTitle: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicTitle"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicTitle"];
      };
    };
    responses: {
      /** @description Comic title added. */
      201: {
        headers: {
          /** @description The path of new comic title. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicTitle"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic title. */
  getComicTitle: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic title to return. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic title gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicTitle"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic title. */
  deleteComicTitle: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic title to delete. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic title deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic title. */
  updateComicTitle: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic title to update. */
        rid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicTitle"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicTitle"];
      };
    };
    responses: {
      /** @description Comic title updated. */
      200: {
        headers: {
          /** @description The path of updated comic title. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicTitle"];
        };
      };
      /** @description Comic title unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic cover. */
  addComicCover: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicCover"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicCover"];
      };
    };
    responses: {
      /** @description Comic cover added. */
      201: {
        headers: {
          /** @description The path of new comic cover. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicCover"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic cover. */
  getComicCover: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic cover to return. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic cover gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicCover"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic cover. */
  deleteComicCover: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic cover to delete. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic cover deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic cover. */
  updateComicCover: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic cover to update. */
        rid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicCover"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicCover"];
      };
    };
    responses: {
      /** @description Comic cover updated. */
      200: {
        headers: {
          /** @description The path of updated comic cover. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicCover"];
        };
      };
      /** @description Comic cover unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic synopsis. */
  addComicSynopsis: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicSynopsis"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicSynopsis"];
      };
    };
    responses: {
      /** @description Comic synopsis added. */
      201: {
        headers: {
          /** @description The path of new comic synopsis. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicSynopsis"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic synopsis. */
  getComicSynopsis: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic synopsis to return. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic synopsis gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicSynopsis"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic synopsis. */
  deleteComicSynopsis: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic synopsis to delete. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic synopsis deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic synopsis. */
  updateComicSynopsis: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic synopsis to update. */
        rid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicSynopsis"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicSynopsis"];
      };
    };
    responses: {
      /** @description Comic synopsis updated. */
      200: {
        headers: {
          /** @description The path of updated comic synopsis. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicSynopsis"];
        };
      };
      /** @description Comic synopsis unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic external. */
  addComicExternal: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicExternal"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicExternal"];
      };
    };
    responses: {
      /** @description Comic external added. */
      201: {
        headers: {
          /** @description The path of new comic external. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicExternal"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic external. */
  getComicExternal: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic external to return. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic external gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicExternal"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic external. */
  deleteComicExternal: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic external to delete. */
        rid: string;
      };
    };
    responses: {
      /** @description Comic external deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic external. */
  updateComicExternal: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description RID of comic external to update. */
        rid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicExternal"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicExternal"];
      };
    };
    responses: {
      /** @description Comic external updated. */
      200: {
        headers: {
          /** @description The path of updated comic external. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicExternal"];
        };
      };
      /** @description Comic external unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic category. */
  addComicCategory: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicCategory"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicCategory"];
      };
    };
    responses: {
      /** @description Comic category added. */
      201: {
        headers: {
          /** @description The path of new comic category. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicCategory"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic category. */
  getComicCategory: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        categoryCode: string;
      };
    };
    responses: {
      /** @description Comic category gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicCategory"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic category. */
  deleteComicCategory: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        categoryCode: string;
      };
    };
    responses: {
      /** @description Comic category deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic category. */
  updateComicCategory: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        categoryCode: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicCategory"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicCategory"];
      };
    };
    responses: {
      /** @description Comic category updated. */
      200: {
        headers: {
          /** @description The path of updated comic category. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicCategory"];
        };
      };
      /** @description Comic category unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic tag. */
  addComicTag: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicTag"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicTag"];
      };
    };
    responses: {
      /** @description Comic tag added. */
      201: {
        headers: {
          /** @description The path of new comic tag. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicTag"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic tag. */
  getComicTag: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag. */
        tagCode: string;
      };
    };
    responses: {
      /** @description Comic tag gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicTag"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic tag. */
  deleteComicTag: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag. */
        tagCode: string;
      };
    };
    responses: {
      /** @description Comic tag deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic tag. */
  updateComicTag: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag. */
        tagCode: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicTag"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicTag"];
      };
    };
    responses: {
      /** @description Comic tag updated. */
      200: {
        headers: {
          /** @description The path of updated comic tag. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicTag"];
        };
      };
      /** @description Comic tag unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic relation. */
  addComicRelation: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicRelation"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicRelation"];
      };
    };
    responses: {
      /** @description Comic relation added. */
      201: {
        headers: {
          /** @description The path of new comic relation. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicRelation"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic relation. */
  getComicRelation: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of comic relation type. */
        typeID: number;
        /** @description Code of related comic. */
        comicCode: string;
      };
    };
    responses: {
      /** @description Comic relation gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicRelation"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic relation. */
  deleteComicRelation: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of comic relation type. */
        typeID: number;
        /** @description Code of related comic. */
        comicCode: string;
      };
    };
    responses: {
      /** @description Comic relation deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic relation. */
  updateComicRelation: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Type ID of comic relation type. */
        typeID: number;
        /** @description Code of related comic. */
        comicCode: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicRelation"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicRelation"];
      };
    };
    responses: {
      /** @description Comic relation updated. */
      200: {
        headers: {
          /** @description The path of updated comic relation. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicRelation"];
        };
      };
      /** @description Comic relation unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List comic chapter. */
  listComicChapter: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    responses: {
      /** @description Comic chapter list. */
      200: {
        headers: {
          /** @description The total count of comic chapter with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of comic chapter with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic chapter. */
  addComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicChapter"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicChapter"];
      };
    };
    responses: {
      /** @description Comic chapter added. */
      201: {
        headers: {
          /** @description The path of new comic chapter. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic chapter. */
  getComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic to return. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to return. */
        cv: string;
      };
    };
    responses: {
      /** @description Comic chapter gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic chapter. */
  deleteComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to delete. */
        cv: string;
      };
    };
    responses: {
      /** @description Comic chapter deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic chapter. */
  updateComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to update. */
        cv: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicChapter"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicChapter"];
      };
    };
    responses: {
      /** @description Comic chapter updated. */
      200: {
        headers: {
          /** @description The path of updated comic chapter. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      /** @description Comic chapter unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List category. */
  listCategory: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Category list. */
      200: {
        headers: {
          /** @description The total count of category with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of category with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Category"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add category. */
  addCategory: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewCategory"];
        "application/x-www-form-urlencoded": components["schemas"]["NewCategory"];
      };
    };
    responses: {
      /** @description Category added. */
      201: {
        headers: {
          /** @description The path of new category. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get category. */
  getCategory: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category to return. */
        code: string;
      };
    };
    responses: {
      /** @description Category gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete category. */
  deleteCategory: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Category deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update category. */
  updateCategory: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetCategory"];
        "application/x-www-form-urlencoded": components["schemas"]["SetCategory"];
      };
    };
    responses: {
      /** @description Category updated. */
      200: {
        headers: {
          /** @description The path of updated category. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Category unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add category relation. */
  addCategoryRelation: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewCategoryRelation"];
        "application/x-www-form-urlencoded": components["schemas"]["NewCategoryRelation"];
      };
    };
    responses: {
      /** @description Category relation added. */
      201: {
        headers: {
          /** @description The path of new category relation. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["CategoryRelation"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get category relation. */
  getCategoryRelation: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        code: string;
        /** @description Code of related category. */
        categoryCode: string;
      };
    };
    responses: {
      /** @description Category relation gets. */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryRelation"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete category relation. */
  deleteCategoryRelation: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        code: string;
        /** @description Code of related category. */
        categoryCode: string;
      };
    };
    responses: {
      /** @description Category relation deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update category relation. */
  updateCategoryRelation: {
    parameters: {
      path: {
        /** @description Type ID of category type. */
        typeID: number;
        /** @description Code of category. */
        code: string;
        /** @description Code of related category. */
        categoryCode: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetCategoryRelation"];
        "application/x-www-form-urlencoded": components["schemas"]["SetCategoryRelation"];
      };
    };
    responses: {
      /** @description Category relation updated. */
      200: {
        headers: {
          /** @description The path of updated category relation. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["CategoryRelation"];
        };
      };
      /** @description Category relation unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List tag. */
  listTag: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Tag list. */
      200: {
        headers: {
          /** @description The total count of tag with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of tag with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Tag"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add tag. */
  addTag: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewTag"];
        "application/x-www-form-urlencoded": components["schemas"]["NewTag"];
      };
    };
    responses: {
      /** @description Tag added. */
      201: {
        headers: {
          /** @description The path of new tag. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get tag. */
  getTag: {
    parameters: {
      path: {
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag to return. */
        code: string;
      };
    };
    responses: {
      /** @description Tag gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete tag. */
  deleteTag: {
    parameters: {
      path: {
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Tag deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update tag. */
  updateTag: {
    parameters: {
      path: {
        /** @description Type ID of tag type. */
        typeID: number;
        /** @description Code of tag to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetTag"];
        "application/x-www-form-urlencoded": components["schemas"]["SetTag"];
      };
    };
    responses: {
      /** @description Tag updated. */
      200: {
        headers: {
          /** @description The path of updated tag. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Tag unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List language. */
  listLanguage: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Language list. */
      200: {
        headers: {
          /** @description The total count of language with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of language with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Language"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add language. */
  addLanguage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewLanguage"];
      };
    };
    responses: {
      /** @description Language added. */
      201: {
        headers: {
          /** @description The path of new language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get language. */
  getLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to return. */
        ietf: string;
      };
    };
    responses: {
      /** @description Language gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete language. */
  deleteLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to delete. */
        ietf: string;
      };
    };
    responses: {
      /** @description Language deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update language. */
  updateLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to update. */
        ietf: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["SetLanguage"];
      };
    };
    responses: {
      /** @description Language updated. */
      200: {
        headers: {
          /** @description The path of updated language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      /** @description Language unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List website. */
  listWebsite: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Website list. */
      200: {
        headers: {
          /** @description The total count of website with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of website with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Website"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add website. */
  addWebsite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewWebsite"];
        "application/x-www-form-urlencoded": components["schemas"]["NewWebsite"];
      };
    };
    responses: {
      /** @description Website added. */
      201: {
        headers: {
          /** @description The path of new website. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get website. */
  getWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to return. */
        domain: string;
      };
    };
    responses: {
      /** @description Website gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete website. */
  deleteWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to delete. */
        domain: string;
      };
    };
    responses: {
      /** @description Website deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update website. */
  updateWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to update. */
        domain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetWebsite"];
        "application/x-www-form-urlencoded": components["schemas"]["SetWebsite"];
      };
    };
    responses: {
      /** @description Website updated. */
      200: {
        headers: {
          /** @description The path of updated website. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      /** @description Website unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List category type. */
  listCategoryType: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Category type list. */
      200: {
        headers: {
          /** @description The total count of category type with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of category type with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["GenericType"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add category type. */
  addCategoryType: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["NewGenericType"];
      };
    };
    responses: {
      /** @description Category type added. */
      201: {
        headers: {
          /** @description The path of new category type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get category type. */
  getCategoryType: {
    parameters: {
      path: {
        /** @description Code of category type to return. */
        code: string;
      };
    };
    responses: {
      /** @description Category type gets. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete category type. */
  deleteCategoryType: {
    parameters: {
      path: {
        /** @description Code of category type to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Category type deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update category type. */
  updateCategoryType: {
    parameters: {
      path: {
        /** @description Code of category type to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["SetGenericType"];
      };
    };
    responses: {
      /** @description Category type updated. */
      200: {
        headers: {
          /** @description The path of updated category type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      /** @description Category type unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List tag type. */
  listTagType: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Tag type list. */
      200: {
        headers: {
          /** @description The total count of tag type with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of tag type with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["GenericType"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add tag type. */
  addTagType: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["NewGenericType"];
      };
    };
    responses: {
      /** @description Tag type added. */
      201: {
        headers: {
          /** @description The path of new tag type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get tag type. */
  getTagType: {
    parameters: {
      path: {
        /** @description Code of tag type to return. */
        code: string;
      };
    };
    responses: {
      /** @description Tag type gets. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete tag type. */
  deleteTagType: {
    parameters: {
      path: {
        /** @description Code of tag type to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Tag type deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update tag type. */
  updateTagType: {
    parameters: {
      path: {
        /** @description Code of tag type to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["SetGenericType"];
      };
    };
    responses: {
      /** @description Tag type updated. */
      200: {
        headers: {
          /** @description The path of updated tag type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      /** @description Tag type unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List comic relation type. */
  listComicRelationType: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Comic relation type list. */
      200: {
        headers: {
          /** @description The total count of comic relation type with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of comic relation type with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["GenericType"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic relation type. */
  addComicRelationType: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["NewGenericType"];
      };
    };
    responses: {
      /** @description Comic relation type added. */
      201: {
        headers: {
          /** @description The path of new comic relation type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic relation type. */
  getComicRelationType: {
    parameters: {
      path: {
        /** @description Code of comic relation type to return. */
        code: string;
      };
    };
    responses: {
      /** @description Comic relation type gets. */
      200: {
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic relation type. */
  deleteComicRelationType: {
    parameters: {
      path: {
        /** @description Code of comic relation type to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Comic relation type deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic relation type. */
  updateComicRelationType: {
    parameters: {
      path: {
        /** @description Code of comic relation type to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetGenericType"];
        "application/x-www-form-urlencoded": components["schemas"]["SetGenericType"];
      };
    };
    responses: {
      /** @description Comic relation type updated. */
      200: {
        headers: {
          /** @description The path of updated comic relation type. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["GenericType"];
        };
      };
      /** @description Comic relation type unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
}
