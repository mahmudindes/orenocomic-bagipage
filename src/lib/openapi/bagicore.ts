/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/comics": {
    /** List comic. */
    get: operations["listComic"];
    /** Add comic. */
    post: operations["addComic"];
  };
  "/comics/{code}": {
    /** Get comic. */
    get: operations["getComic"];
    /** Delete comic. */
    delete: operations["deleteComic"];
    /** Update comic. */
    patch: operations["updateComic"];
  };
  "/comics/{code}/links": {
    /** Add comic link. */
    post: operations["addComicLink"];
  };
  "/comics/{code}/links/{websiteDomain}-{relativeURL}": {
    /** Get comic link. */
    get: operations["getComicLink"];
    /** Delete comic link. */
    delete: operations["deleteComicLink"];
    /** Update comic link. */
    patch: operations["updateComicLink"];
  };
  "/comics/{code}/chapters": {
    /** List comic chapter. */
    get: operations["listComicChapter"];
    /** Add comic chapter. */
    post: operations["addComicChapter"];
  };
  "/comics/{code}/chapters/{cv}": {
    /** Get comic chapter. */
    get: operations["getComicChapter"];
    /** Delete comic chapter. */
    delete: operations["deleteComicChapter"];
    /** Update comic chapter. */
    patch: operations["updateComicChapter"];
  };
  "/comics/{code}/chapters/{cv}/links": {
    /** Add comic chapter link. */
    post: operations["addComicChapterLink"];
  };
  "/comics/{code}/chapters/{cv}/links/{websiteDomain}-{relativeURL}": {
    /** Get comic chapter link. */
    get: operations["getComicChapterLink"];
    /** Delete comic chapter link. */
    delete: operations["deleteComicChapterLink"];
    /** Update comic chapter link. */
    patch: operations["updateComicChapterLink"];
  };
  "/languages": {
    /** List language. */
    get: operations["listLanguage"];
    /** Add language. */
    post: operations["addLanguage"];
  };
  "/languages/{ietf}": {
    /** Get language. */
    get: operations["getLanguage"];
    /** Delete language. */
    delete: operations["deleteLanguage"];
    /** Update language. */
    patch: operations["updateLanguage"];
  };
  "/websites": {
    /** List website. */
    get: operations["listWebsite"];
    /** Add website. */
    post: operations["addWebsite"];
  };
  "/websites/{domain}": {
    /** Get website. */
    get: operations["getWebsite"];
    /** Delete website. */
    delete: operations["deleteWebsite"];
    /** Update website. */
    patch: operations["updateWebsite"];
  };
  "/websites/{domain}/tl-languages": {
    /** Add website TL language. */
    post: operations["addWebsiteTLLanguage"];
  };
  "/websites/{domain}/tl-languages/{ietf}": {
    /** Get website TL language. */
    get: operations["getWebsiteTLLanguage"];
    /** Delete website TL language. */
    delete: operations["deleteWebsiteTLLanguage"];
    /** Update website TL language. */
    patch: operations["updateWebsiteTLLanguage"];
  };
  "/links": {
    /** List link. */
    get: operations["listLink"];
    /** Add link. */
    post: operations["addLink"];
  };
  "/links/{websiteDomain}-{relativeURL}": {
    /** Get link. */
    get: operations["getLink"];
    /** Delete link. */
    delete: operations["deleteLink"];
    /** Update link. */
    patch: operations["updateLink"];
  };
  "/links/{websiteDomain}-{relativeURL}/tl-languages": {
    /** Add link TL language. */
    post: operations["addLinkTLLanguage"];
  };
  "/links/{websiteDomain}-{relativeURL}/tl-languages/{ietf}": {
    /** Get link TL language. */
    get: operations["getLinkTLLanguage"];
    /** Delete link TL language. */
    delete: operations["deleteLinkTLLanguage"];
    /** Update link TL language. */
    patch: operations["updateLinkTLLanguage"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Object: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
    };
    Comic: components["schemas"]["Object"] & {
      code: string;
      links?: components["schemas"]["Link"][];
      chapters?: components["schemas"]["ComicChapter"][];
    };
    NewComic: {
      code: string;
    };
    SetComic: {
      code?: string | null;
    };
    ComicLink: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      linkID: number;
      linkWebsiteDomain: string;
      linkRelativeURL: string;
    };
    NewComicLink: {
      linkID?: number | null;
      linkWebsiteDomain?: string | null;
      linkRelativeURL?: string | null;
    };
    SetComicLink: {
      linkID?: number | null;
      linkWebsiteDomain?: string | null;
      linkRelativeURL?: string | null;
    };
    ComicChapter: components["schemas"]["Object"] & ({
      chapter: string;
      version?: string | null;
      /** Format: date-time */
      releasedAt: string;
      links?: components["schemas"]["Link"][];
    });
    NewComicChapter: {
      chapter: string;
      version?: string | null;
      /** Format: date-time */
      releasedAt: string;
    };
    SetComicChapter: {
      chapter?: string | null;
      version?: string | null;
      /** Format: date-time */
      releasedAt?: string | null;
      setNull?: string[];
    };
    ComicChapterLink: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      linkID: number;
      linkWebsiteDomain: string;
      linkRelativeURL: string;
    };
    NewComicChapterLink: {
      linkID?: number | null;
      linkWebsiteDomain?: string | null;
      linkRelativeURL?: string | null;
    };
    SetComicChapterLink: {
      linkID?: number | null;
      linkWebsiteDomain?: string | null;
      linkRelativeURL?: string | null;
    };
    Language: components["schemas"]["Object"] & {
      ietf: string;
      name: string;
    };
    NewLanguage: {
      ietf: string;
      name: string;
    };
    SetLanguage: {
      ietf?: string | null;
      name?: string | null;
    };
    Website: components["schemas"]["Object"] & ({
      domain: string;
      name: string;
      tlLanguages?: components["schemas"]["Language"][];
      machineTL?: boolean | null;
    });
    NewWebsite: {
      domain: string;
      name: string;
      machineTL?: boolean | null;
    };
    SetWebsite: {
      domain?: string | null;
      name?: string | null;
      machineTL?: boolean | null;
    };
    WebsiteTLLanguage: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      languageID: number;
      languageIETF: string;
    };
    NewWebsiteTLLanguage: {
      languageID?: number | null;
      languageIETF?: string | null;
    };
    SetWebsiteTLLanguage: {
      languageID?: number | null;
      languageIETF?: string | null;
    };
    Link: components["schemas"]["Object"] & ({
      websiteID: number;
      websiteDomain: string;
      relativeURL: string;
      tlLanguages?: components["schemas"]["Language"][];
      machineTL?: boolean | null;
    });
    NewLink: {
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL: string;
      machineTL?: boolean | null;
    };
    SetLink: {
      websiteID?: number | null;
      websiteDomain?: string | null;
      relativeURL?: string | null;
      machineTL?: boolean | null;
      setNull?: string[];
    };
    LinkTLLanguage: {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt?: string | null;
      languageID: number;
      languageIETF: string;
    };
    NewLinkTLLanguage: {
      languageID?: number | null;
      languageIETF?: string | null;
    };
    SetLinkTLLanguage: {
      languageID?: number | null;
      languageIETF?: string | null;
    };
    Error: {
      error: {
        status: string;
        message: string;
      };
    };
  };
  responses: {
    /** @description Unexpected error. */
    Default: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List comic. */
  listComic: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Comic list. */
      200: {
        headers: {
          /** @description The total count of comic with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of comic with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Comic"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic. */
  addComic: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComic"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComic"];
      };
    };
    responses: {
      /** @description Comic added. */
      201: {
        headers: {
          /** @description The path of new comic. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic. */
  getComic: {
    parameters: {
      path: {
        /** @description Code of comic to return. */
        code: string;
      };
    };
    responses: {
      /** @description Comic gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic. */
  deleteComic: {
    parameters: {
      path: {
        /** @description Code of comic to delete. */
        code: string;
      };
    };
    responses: {
      /** @description Comic deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic. */
  updateComic: {
    parameters: {
      path: {
        /** @description Code of comic to update. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComic"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComic"];
      };
    };
    responses: {
      /** @description Comic updated. */
      200: {
        headers: {
          /** @description The path of updated comic. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Comic"];
        };
      };
      /** @description Comic unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic link. */
  addComicLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicLink"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicLink"];
      };
    };
    responses: {
      /** @description Comic link added. */
      201: {
        headers: {
          /** @description The path of new comic link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicLink"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic link. */
  getComicLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Website domain name of link to return. */
        websiteDomain: string;
        /** @description Relative URL of link to return. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Comic link gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicLink"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic link. */
  deleteComicLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Website domain name of comic link to delete. */
        websiteDomain: string;
        /** @description Relative URL of link to delete. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Comic link deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic link. */
  updateComicLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Website domain name of link to update. */
        websiteDomain: string;
        /** @description Relative URL of link to update. */
        relativeURL: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicLink"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicLink"];
      };
    };
    responses: {
      /** @description Comic link updated. */
      200: {
        headers: {
          /** @description The path of updated comic link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicLink"];
        };
      };
      /** @description Comic link unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List comic chapter. */
  listComicChapter: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    responses: {
      /** @description Comic chapter list. */
      200: {
        headers: {
          /** @description The total count of comic chapter with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of comic chapter with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic chapter. */
  addComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
      };
    };
    /** @description You can't set comic id or comic code because it will be overridden by code path parameter. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicChapter"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicChapter"];
      };
    };
    responses: {
      /** @description Comic chapter added. */
      201: {
        headers: {
          /** @description The path of new comic chapter. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic chapter. */
  getComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic to return. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to return. */
        cv: string;
      };
    };
    responses: {
      /** @description Comic chapter gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic chapter. */
  deleteComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to delete. */
        cv: string;
      };
    };
    responses: {
      /** @description Comic chapter deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic chapter. */
  updateComicChapter: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter to update. */
        cv: string;
      };
    };
    /** @description You can't change comic id or comic code in this endpoint. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicChapter"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicChapter"];
      };
    };
    responses: {
      /** @description Comic chapter updated. */
      200: {
        headers: {
          /** @description The path of updated comic chapter. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapter"];
        };
      };
      /** @description Comic chapter unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add comic chapter link. */
  addComicChapterLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter. */
        cv: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewComicChapterLink"];
        "application/x-www-form-urlencoded": components["schemas"]["NewComicChapterLink"];
      };
    };
    responses: {
      /** @description Comic chapter link added. */
      201: {
        headers: {
          /** @description The path of new comic chapter link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapterLink"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get comic chapter link. */
  getComicChapterLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter. */
        cv: string;
        /** @description Website domain name of link to return. */
        websiteDomain: string;
        /** @description Relative URL of link to return. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Comic chapter link gets. */
      200: {
        content: {
          "application/json": components["schemas"]["ComicChapterLink"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete comic chapter link. */
  deleteComicChapterLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter. */
        cv: string;
        /** @description Website domain name of comic link to delete. */
        websiteDomain: string;
        /** @description Relative URL of link to delete. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Comic chapter link deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update comic chapter link. */
  updateComicChapterLink: {
    parameters: {
      path: {
        /** @description Code of comic. */
        code: string;
        /** @description Chapter[+Version] of comic chapter. */
        cv: string;
        /** @description Website domain name of link to update. */
        websiteDomain: string;
        /** @description Relative URL of link to update. */
        relativeURL: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetComicChapterLink"];
        "application/x-www-form-urlencoded": components["schemas"]["SetComicChapterLink"];
      };
    };
    responses: {
      /** @description Comic chapter link updated. */
      200: {
        headers: {
          /** @description The path of updated comic chapter link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ComicChapterLink"];
        };
      };
      /** @description Comic chapter link unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List language. */
  listLanguage: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Language list. */
      200: {
        headers: {
          /** @description The total count of language with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of language with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Language"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add language. */
  addLanguage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewLanguage"];
      };
    };
    responses: {
      /** @description Language added. */
      201: {
        headers: {
          /** @description The path of new language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get language. */
  getLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to return. */
        ietf: string;
      };
    };
    responses: {
      /** @description Language gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete language. */
  deleteLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to delete. */
        ietf: string;
      };
    };
    responses: {
      /** @description Language deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update language. */
  updateLanguage: {
    parameters: {
      path: {
        /** @description IETF code of language to update. */
        ietf: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["SetLanguage"];
      };
    };
    responses: {
      /** @description Language updated. */
      200: {
        headers: {
          /** @description The path of updated language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Language"];
        };
      };
      /** @description Language unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List website. */
  listWebsite: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Website list. */
      200: {
        headers: {
          /** @description The total count of website with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of website with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Website"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add website. */
  addWebsite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewWebsite"];
        "application/x-www-form-urlencoded": components["schemas"]["NewWebsite"];
      };
    };
    responses: {
      /** @description Website added. */
      201: {
        headers: {
          /** @description The path of new website. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get website. */
  getWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to return. */
        domain: string;
      };
    };
    responses: {
      /** @description Website gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete website. */
  deleteWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to delete. */
        domain: string;
      };
    };
    responses: {
      /** @description Website deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update website. */
  updateWebsite: {
    parameters: {
      path: {
        /** @description Domain name of website to update. */
        domain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetWebsite"];
        "application/x-www-form-urlencoded": components["schemas"]["SetWebsite"];
      };
    };
    responses: {
      /** @description Website updated. */
      200: {
        headers: {
          /** @description The path of updated website. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Website"];
        };
      };
      /** @description Website unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add website TL language. */
  addWebsiteTLLanguage: {
    parameters: {
      path: {
        /** @description Domain name of website. */
        domain: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewWebsiteTLLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewWebsiteTLLanguage"];
      };
    };
    responses: {
      /** @description Website TL language added. */
      201: {
        headers: {
          /** @description The path of new website TL language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["WebsiteTLLanguage"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get website TL language. */
  getWebsiteTLLanguage: {
    parameters: {
      path: {
        /** @description Domain name of website. */
        domain: string;
        /** @description IETF code of website TL language to return. */
        ietf: string;
      };
    };
    responses: {
      /** @description Website TL language gets. */
      200: {
        content: {
          "application/json": components["schemas"]["WebsiteTLLanguage"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete website TL language. */
  deleteWebsiteTLLanguage: {
    parameters: {
      path: {
        /** @description Domain name of website. */
        domain: string;
        /** @description IETF code of website TL language to delete. */
        ietf: string;
      };
    };
    responses: {
      /** @description Website TL language deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update website TL language. */
  updateWebsiteTLLanguage: {
    parameters: {
      path: {
        /** @description Domain name of website. */
        domain: string;
        /** @description IETF code of website TL language to update. */
        ietf: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetWebsiteTLLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["SetWebsiteTLLanguage"];
      };
    };
    responses: {
      /** @description Website TL language updated. */
      200: {
        headers: {
          /** @description The path of updated website TL language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["WebsiteTLLanguage"];
        };
      };
      /** @description Website TL language unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** List link. */
  listLink: {
    parameters: {
      query?: {
        /** @description Page number of results. */
        page?: number;
        /** @description Maximum number of results. */
        limit?: number;
        /** @description Sort results returned. */
        order_by?: string[];
      };
    };
    responses: {
      /** @description Link list. */
      200: {
        headers: {
          /** @description The total count of link with current filter. */
          "X-Total-Count"?: number;
          /** @description The last page number of link with current filter and limit. */
          "X-Pagination-Limit"?: number;
        };
        content: {
          "application/json": components["schemas"]["Link"][];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add link. */
  addLink: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewLink"];
        "application/x-www-form-urlencoded": components["schemas"]["NewLink"];
      };
    };
    responses: {
      /** @description Link added. */
      201: {
        headers: {
          /** @description The path of new link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Link"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get link. */
  getLink: {
    parameters: {
      path: {
        /** @description Website domain name of link to return. */
        websiteDomain: string;
        /** @description Relative URL of link to return. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Link gets. */
      200: {
        content: {
          "application/json": components["schemas"]["Link"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete link. */
  deleteLink: {
    parameters: {
      path: {
        /** @description Website domain name of linik to delete. */
        websiteDomain: string;
        /** @description Relative URL of linik to delete. */
        relativeURL: string;
      };
    };
    responses: {
      /** @description Link deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update link. */
  updateLink: {
    parameters: {
      path: {
        /** @description Website domain name of link to update. */
        websiteDomain: string;
        /** @description Relative URL of link to update. */
        relativeURL: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLink"];
        "application/x-www-form-urlencoded": components["schemas"]["SetLink"];
      };
    };
    responses: {
      /** @description Link updated. */
      200: {
        headers: {
          /** @description The path of updated link. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["Link"];
        };
      };
      /** @description Link unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Add link TL language. */
  addLinkTLLanguage: {
    parameters: {
      path: {
        /** @description Website domain name of link. */
        websiteDomain: string;
        /** @description Relative URL of link. */
        relativeURL: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewLinkTLLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["NewLinkTLLanguage"];
      };
    };
    responses: {
      /** @description Link TL language added. */
      201: {
        headers: {
          /** @description The path of new link TL language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["LinkTLLanguage"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Get link TL language. */
  getLinkTLLanguage: {
    parameters: {
      path: {
        /** @description Website domain name of link. */
        websiteDomain: string;
        /** @description Relative URL of link. */
        relativeURL: string;
        /** @description IETF code of link TL language to return. */
        ietf: string;
      };
    };
    responses: {
      /** @description Link TL language gets. */
      200: {
        content: {
          "application/json": components["schemas"]["LinkTLLanguage"];
        };
      };
      default: components["responses"]["Default"];
    };
  };
  /** Delete link TL language. */
  deleteLinkTLLanguage: {
    parameters: {
      path: {
        /** @description Website domain name of link. */
        websiteDomain: string;
        /** @description Relative URL of link. */
        relativeURL: string;
        /** @description IETF code of link TL language to delete. */
        ietf: string;
      };
    };
    responses: {
      /** @description Link TL language deleted. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
  /** Update link TL language. */
  updateLinkTLLanguage: {
    parameters: {
      path: {
        /** @description Website domain name of link. */
        websiteDomain: string;
        /** @description Relative URL of link. */
        relativeURL: string;
        /** @description IETF code of link TL language to update. */
        ietf: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetLinkTLLanguage"];
        "application/x-www-form-urlencoded": components["schemas"]["SetLinkTLLanguage"];
      };
    };
    responses: {
      /** @description Link TL language updated. */
      200: {
        headers: {
          /** @description The path of updated link TL language. */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["LinkTLLanguage"];
        };
      };
      /** @description Link TL language unmodified. */
      204: {
        content: never;
      };
      default: components["responses"]["Default"];
    };
  };
}
